# ME 751 HW 9 problem 1
#Alex Dawson-Elli

#problem  1 - perform  10 seconds of Dynamic analysis on the simple pendulum
#   - compare the accelerations for QN, MN, NR methods
#   - plot the iterations to converge for these methods

#includes
methods = ["QN" , "MN" , "NR"]
histList = Array{Any}(3)

include("../../src/SimEngine3D.jl")
using SimEngine3D ; SE3D = SimEngine3D;  #alias

for i in 1:3

  #define the simulation
  sim = SE3D.Sim(2)

  #add the ground body in the simulation as body 1
  SE3D.addGround!(sim)

  #define the pendulum object and add to system
  #initial kinematics
  t = 0  #initial time
  L = 2  #half the length of the pendulum
  theta = pi/4*cos(2*t) #initial configuration
  rot = SE3D.Ry(pi/2)*SE3D.Rz(theta) #account for pi/2 rotation
  p = SE3D.A2P(rot)
  r = [0; L*sin(theta);-L*cos(theta)]

  #mass properties
  ρ = 7800; l = 4; w = .05
  volume = l*w^2
  mass = volume*ρ
  J = eye(3)
  J[1,1] = mass/12*(w^2 + w^2)
  J[2,2] = mass/12*(l^2 + w^2)
  J[3,3] = J[2,2]

  #make a body for the pendulum ,body #2
  pendulum = SE3D.Body(sim,2,mass,J)

  #add to simulation in initial configuration
  SE3D.addBody!(sim, pendulum, r, p)

  #add points to bodies to use for kinematic constraints (see 9.26 - slide 32)
  #i is ground, j is pendulum
  Pi = [0 0 0]'  #this is the default point
  Qj = [-L 0 0]' #Pi and Qj are the points which are coincident in the sphirical joint
  ai_head = [0 0 -1]'  #ai and bi vectors define the yz plane of body i (ground)
  bi_head = [0 1 0]'
  cj_head = [0 0 1]'  #vector defining the axis of rotation in the LRF of bodyj

  #SE3D.addPoint(sim.bodies[1] , Pi)
  SE3D.addPoint(sim.bodies[1] , ai_head) #index 3
  SE3D.addPoint(sim.bodies[1] , bi_head) #index 4
  SE3D.addPoint(sim.bodies[2] , Qj)      #index 2
  SE3D.addPoint(sim.bodies[2] , cj_head) #index 3

  #hardcode the indecies
  PiID = 1; QjID = 2; ai_headID = 3; bi_headID = 4; cj_headID = 3 ; bodyj_xID = 4
  #add kinematic constraints
  rev = SE3D.rj(sim,sim.bodies[1],sim.bodies[2],PiID,QjID,ai_headID,bi_headID,cj_headID)
  SE3D.addConstraint!(sim,rev)

  #initialize simulation
  SE3D.initForAnalysis(sim)

  #perform Inverse Dynamics Analysis
  tstart = 0
  tstop = 10
  δt = .01


  histList[i] = SE3D.DynamicsAnalysis(sim,tstart,tstop,δt,methods[i])
end

#--------------------------------plots--------------------------------------
# SE3D.diffrddot(histList[1],"QN",histList[3],"NR",2)
# SE3D.diffrddot(histList[2],"MN",histList[3],"NR",2)
#
# SE3D.plotIter2Convg(histList,methods)
