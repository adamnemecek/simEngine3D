#dynamics
"""
Dynamics Analysis  - for systems that are underconstrainted, determine the kinematics
q,qdot,qddot and the reaction forces given the constraints and the externally applied
forces
"""
function DynamicsAnalysis(sim::Sim,tStart,tStop,Œ¥t = .001)
  if nDOF(sim) == 0
    warn("dynamic analysis should happen with degress of freedom present")
  end

  #make sure level zero and level one constraints are consistent
  checkInitialConditions(sim)

  #find the initial qddot and lagrange multipliers, based on supplied level zero and one checkInitialConditions
  findInitialL2conditions(sim)

  #setup history
  tgrid = tStart:Œ¥t:tStop # type unit range
  hist = History(sim,tgrid)
  tInd = 1;

  #iterate through time grid and solve dynamics equations
  for instant in tgrid
    #update time
    sim.t = instant

    if tInd == 1 #save snapshot @ t = 0
      snapShot(sim,hist,tInd)
    end

    if tInd == 2  #use BDF of order to seed future solutions
      BDF(sim,1,Œ¥t,tInd,hist)
    end

    if tInd >= 3 #perform full integration with BDF order 2
      BDF(sim,2,Œ¥t,tInd,hist)
    end
    #store simulation state snapshot
      snapShot(sim,hist,tInd)
    tInd += 1
  end

  return hist
end

"""determine a set of velocities that are consistant with the L1 constraint equations
and a small set of manually specified velocities"""
function setInitialVelocities(sim::Sim)
  #manually determining a consistant set of velocities can be difficult, and there
  #are frequently an infinite set of solutions. this function determines a set of velocities
  #that minimizes the L2 norm of the velocity vector, and satisfies the vel constraints

  #collect bodies with nonzero rdot's and pdots
  rdotICbodies = Array{Any}(0) #set of bodies with non-zero rdot's (by reference)
  pdotICbodies = Array{Any}(0) #set of bodies with non-zero rdot's (by reference)
  for body in sim.bodies
    if rdot(body) != [0 0 0]'
        push!(rdotICbodies, body)
    end
    if pdot(body) != [0 0 0 0]'
      push!(rdotICbodies, body)
    end
  end

  #make simple constraint equations that require each specified velocity to take on it's specified value exactly
  ICconstraints = zeros(0,7*sim.nb) #LHS of the constraint equations
  b = zeros(0,1);  #RHS of constraint equations
  for body in rdotICbodies
    rdotConst = zeros(3,7*sim.nb);
    rdotConst[:, 3*(body.ID - 1) + 1:3*body.ID] = eye(3)
    #update rdot constraint equations
    ICconstraints = [ICconstraints ; rdotConst]
    b = [b ; rdot(body)]
  end

  for body in pdotICbodies
    pdotConst = zeros(4,7*sim.nb);
    pdotConst[:, 4*(body.ID - 1) + 1:4*bodyID] = eye(4)
    #update pdot constraint equations
    ICconstraints = [ICconstraints ; pdotConst]
    b = [b ; pdot(body)]
  end

  #build sim level matricies using initial r and p
  build…∏F(sim)
  build…∏k_r(sim)
  build…∏k_p(sim)
  buildP(sim)
  buildŒΩk(sim)

  #formulate the linear system which is likely underconstrainted
  z = zeros(sim.nb, 3*sim.nb) ; zp = zeros(sim.nb,1)
  LHS = [sim.…∏k_r   sim.…∏k_p ;
            z       sim.P    ;
            ICconstraints    ]
  RHS = [sim.ŒΩk ; zp ; b]

  #check at this point that the rank of LHS does not exceed  7nb
  if rank(LHS) > 7*sim.nb
    error("too many velocities prescribed, the system is over constrained")
  end

  #use SVD to find the right pseudoInverse
  U,Œ£,V = svd(LHS)
  Œ£ = diagm(Œ£)
  Jplus = V*(Œ£'*(Œ£*Œ£')^-1)*U'

  #solve for one of an infinite number of solutions for velocities
  sim.qdot = Jplus * RHS   #solution minimizes L2 norm of velocity vector

end




"""make sure that the supplied initial conditions are satified at levels zero and on"""
function checkInitialConditions(sim::Sim, œµ = .0001)
  #based on 10.19 slide 15
  #check position level constraints for consistency
  build…∏F(sim)
  Ind = 0
  for constraintValue in sim.…∏F
    if abs(constraintValue) > œµ
      error("position constraint $Ind is not consistant")
    end
    Ind += 1
  end

  #check the velocity level constraints are satisfied
  buildŒΩk(sim)
  build…∏k_r(sim)
  build…∏k_p(sim)
  rdot = sim.qdot[1:3*sim.nb,1:1] ; pdot = sim.qdot[3*sim.nb + 1:end, 1:1]
  ŒΩ‚ÇÄ = sim.…∏k_r*rdot + sim.…∏k_p*pdot
  Verrors = ŒΩ‚ÇÄ - sim.ŒΩk
  Ind = 0
  for Verror in Verrors
    if abs(Verror) > œµ
      error("velocity equation of constraint $Ind is not consistant")
    end
    Ind += 1
  end

  #check euler parameter constraints
  buildP(sim)
  Perrors = sim.P*pdot
  Ind = 0
  for Perror in Perrors
    if abs(Perror) > œµ
      error("Euler parameter constraint $Ind is not consistant")
    end
    Ind += 1
  end

end

"""given intial level 0 and 1 conditions, solve for the level 2 conditions"""
function findInitialL2conditions(sim::Sim) # 10.19 slide 16
  #construct the required system level state variables
  #build LHS
  buildM(sim)
  build…∏k_r(sim)
  build…∏k_p(sim)
  buildP(sim)
  buildJ·µñ(sim)
  z21 = zeros(4*sim.nb,3*sim.nb)
  z31 = zeros(sim.nb,3*sim.nb)
  z33 = zeros(sim.nb,sim.nb)
  z44 = zeros(sim.nc_k,sim.nc_k)
  z43 = zeros(sim.nc_k,sim.nb)

  LHS = [sim.M    z21'     z31'   sim.…∏k_r';
         z21      sim.J·µñ   sim.P' sim.…∏k_p';
         z31      sim.P    z33    z43'     ;
         sim.…∏k_r sim.…∏k_p z43    z44      ]

  #build RHS
  buildF(sim)
  buildœÑh(sim)
  buildùõæp(sim)
  buildùõæk(sim)

  RHS = [sim.F ; sim.œÑh ; sim.ùõæp ; sim.ùõæk]

  #solve for the level 2 compontents @ t0
  L2 = LHS \ RHS
  sim.qddot =  L2[1:7*sim.nb, 1:1]
  sim.Œªp    =  L2[(7*sim.nb + 1):(7*sim.nb + sim.nc_p), 1:1]
  sim.Œªk    =  L2[(7*sim.nb + sim.nc_p + 1):end, 1:1]

  #build the reaction force vector for archiving in history
  buildF ≥(sim)
  buildnbar ≥(sim)

end

"""
solves for the system state information, at a single time step, by following The
6 steps outlined in 10.19 slide 17, using the quazi newton œà matrix
"""
function BDF(sim::Sim,BDForder::Int64,Œ¥t::Float64,tInd::Int64,hist::History ) #10.19 slide 17
  #interation constants
  mxInterations = 100;
  œµ = 1e-2;

  #handle the different order of BDF
  if BDForder == 1  # 10.14 slide 19 table
    Œ≤‚ÇÄ =  1
    Œ±‚ÇÅ = -1
    C ≥dot = -Œ±‚ÇÅ*rdot(hist,tInd - 1)
    C·µñdot = -Œ±‚ÇÅ*pdot(hist,tInd - 1)
    C ≥ =    -Œ±‚ÇÅ*r(hist,tInd - 1) + Œ≤‚ÇÄ*Œ¥t*C ≥dot
    C·µñ =    -Œ±‚ÇÅ*p(hist,tInd - 1) + Œ≤‚ÇÄ*Œ¥t*C·µñdot
  end

  if BDForder == 2
    Œ≤‚ÇÄ =  2/3
    Œ±‚ÇÅ = -4/3
    Œ±‚ÇÇ =  1/3
    C ≥dot = -Œ±‚ÇÅ*rdot(hist,tInd - 1)  - Œ±‚ÇÇ*rdot(hist,tInd - 2)
    C·µñdot = -Œ±‚ÇÅ*pdot(hist,tInd - 1)  - Œ±‚ÇÇ*pdot(hist,tInd - 2)
    C ≥ =    -Œ±‚ÇÅ*r(hist,tInd - 1) - Œ±‚ÇÇ*r(hist,tInd - 2) + Œ≤‚ÇÄ*Œ¥t*C ≥dot
    C·µñ =    -Œ±‚ÇÅ*p(hist,tInd - 1) - Œ±‚ÇÇ*p(hist,tInd - 2) + Œ≤‚ÇÄ*Œ¥t*C·µñdot
  end

  #step 0: prime new step from previous step
  #sim state variables remain unchanged from previous step
  #initialize constant matricies useful in construction of œà
  z21 = zeros(4*sim.nb,3*sim.nb)
  z31 = zeros(sim.nb,3*sim.nb)
  z33 = zeros(sim.nb,sim.nb)
  z44 = zeros(sim.nc_k,sim.nc_k)
  z43 = zeros(sim.nc_k,sim.nb)

  ŒΩ = 0;
  while ŒΩ < mxInterations
    #step 1: compute the position and velocity using BDF and most recent qddot estimates
    rn  = C ≥ + Œ≤‚ÇÄ^2*Œ¥t^2*rddot(sim) ; rndot = C ≥dot + Œ≤‚ÇÄ*Œ¥t*rddot(sim)
    pn  = C·µñ + Œ≤‚ÇÄ^2*Œ¥t^2*pddot(sim) ; pndot = C·µñdot + Œ≤‚ÇÄ*Œ¥t*pddot(sim)
    #update sim level vars with q and qddot estimates
    sim.q = [rn ; pn] ; sim.qdot = [rndot ; pndot]

    #step 2: compute the residual in the nonlinear system. i.e. evaluate g(z) at ŒΩ
    #build matricies that depend on new q,qddot estimates
    #buildM(sim) const and already built
    build…∏F(sim)
    build…∏k_r(sim)
    build…∏k_p(sim)
    buildP(sim)
    buildJ·µñ(sim)
    buildF(sim)
    buildœÑh(sim)

    #compute g(z)
    gn = [sim.M*rddot(sim)  + sim.…∏k_r'*sim.Œªk - sim.F ;
         sim.J·µñ*pddot(sim)  + sim.…∏k_p'*sim.Œªk + sim.P'*sim.Œªp - sim.œÑh;
         1/(Œ≤‚ÇÄ^2*Œ¥t^2)*sim.…∏p;
         1/(Œ≤‚ÇÄ^2*Œ¥t^2)*sim.…∏k                                            ]

    #step 3: solve the linear system œà*Œîz = -g
    #compute œà
    œà =   [sim.M    z21'     z31'   sim.…∏k_r';
           z21      sim.J·µñ   sim.P' sim.…∏k_p';
           z31      sim.P    z33    z43'     ;
           sim.…∏k_r sim.…∏k_p z43    z44      ]

    #solve linear system for correction Œîz
    Œîz = œà \ -gn

    #step 4: Improve the quality of the approximate solution z(ŒΩ+1) = z(ŒΩ) + Œîz
    z_old = [sim.qddot ; sim.Œªp ; sim.Œªk]
    z_new = z_old + Œîz
    #update system variables
    sim.qddot = z_new[1:7*sim.nb, 1:1]
    sim.Œªp    = z_new[7*sim.nb + 1:8*sim.nb, 1:1]
    sim.Œªk    = z_new[8*sim.nb + 1:8*sim.nb + sim.nc_k, 1:1]
    #step 5: increment ŒΩ, check if  satisfactory convergence is reached
    if norm(Œîz) < œµ
      break
    end
    ŒΩ += 1
  end
  if ŒΩ == 100 println("max iterations exceeded") end
  #step 6: accept, and perform step 1 to update q and qdot to most recent values
  #step 1: compute the position and velocity using BDF and most recent qddot estimates
  rn  = C ≥ + Œ≤‚ÇÄ^2*Œ¥t^2*rddot(sim) ; rndot = C ≥dot + Œ≤‚ÇÄ*Œ¥t*rddot(sim)
  pn  = C·µñ + Œ≤‚ÇÄ^2*Œ¥t^2*pddot(sim) ; pndot = C·µñdot + Œ≤‚ÇÄ*Œ¥t*pddot(sim)
  #update sim level vars with q and qddot estimates
  sim.q = [rn ; pn] ; sim.qdot = [rndot ; pndot]

  #build the reaction force vector for archiving in history
  buildF ≥(sim)
  buildnbar ≥(sim)
end
